{
  "name": "Paperless-AppleReminders-Todo",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/5 * * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Every 5 minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://paperless-ngx.familie-traub.synology.me/api/documents/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "c09a06cf64fec1c436cbd83610f9425e9b18d074"
        },
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "tags__name",
                "value": "Todo"
              },
              {
                "name": "ordering",
                "value": "-created"
              },
              {
                "name": "limit",
                "value": "10"
              }
            ]
          }
        }
      },
      "id": "get-todo-documents",
      "name": "Get Todo Documents",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Verarbeite Paperless-NGX API Response\nconst data = $input.first().json;\n\nif (!data.results || data.results.length === 0) {\n  return [];\n}\n\nconst documents = data.results;\nconst processedItems = [];\n\n// Hole bereits verarbeitete Dokumente aus dem Workflow Memory\n// (In Production solltest du eine echte Datenbank oder Redis verwenden)\nconst processedDocs = $workflow.getStaticData('global').processedDocs || [];\n\nfor (const doc of documents) {\n  // Prüfe ob Dokument bereits verarbeitet wurde\n  if (processedDocs.includes(doc.id)) {\n    continue;\n  }\n  \n  // Baue Tag-Array aus den Tag-Objekten\n  const tagNames = doc.tags ? doc.tags.map(tag => typeof tag === 'object' ? tag.name : tag) : [];\n  \n  // Erstelle formatierte Dokument-Daten\n  const processedDoc = {\n    document_id: doc.id,\n    title: doc.title || 'Unbenanntes Dokument',\n    created: doc.created,\n    content: doc.content || '',\n    tags: tagNames,\n    download_url: `https://YOUR_PAPERLESS_URL/api/documents/${doc.id}/download/`,\n    web_url: `https://YOUR_PAPERLESS_URL/documents/${doc.id}/`,\n    correspondent: doc.correspondent ? doc.correspondent.name : null,\n    document_type: doc.document_type ? doc.document_type.name : null,\n    archive_serial_number: doc.archive_serial_number || null\n  };\n  \n  processedItems.push(processedDoc);\n  \n  // Markiere Dokument als verarbeitet\n  processedDocs.push(doc.id);\n}\n\n// Speichere aktualisierte Liste der verarbeiteten Dokumente\n$workflow.getStaticData('global').processedDocs = processedDocs;\n\n// Begrenze die Liste auf die letzten 1000 Einträge um Speicher zu sparen\nif (processedDocs.length > 1000) {\n  $workflow.getStaticData('global').processedDocs = processedDocs.slice(-1000);\n}\n\nconsole.log(`Gefunden: ${documents.length} Dokumente, Neu: ${processedItems.length}`);\n\nreturn processedItems.map(item => ({ json: item }));"
      },
      "id": "process-documents",
      "name": "Process Documents",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "filter-valid-docs",
      "name": "Filter Valid Documents",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "url": "YOUR_APPLE_SHORTCUTS_WEBHOOK_URL",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"document_id\": $json.document_id,\n  \"title\": $json.title,\n  \"created\": $json.created,\n  \"web_url\": $json.web_url,\n  \"download_url\": $json.download_url,\n  \"tags\": $json.tags,\n  \"correspondent\": $json.correspondent,\n  \"document_type\": $json.document_type,\n  \"archive_serial_number\": $json.archive_serial_number\n} }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-to-apple-shortcuts",
      "name": "Send to Apple Shortcuts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Log erfolgreich verarbeitete Dokumente\nconst item = $input.first().json;\n\nconsole.log(`✅ Erfolgreich an Apple Shortcuts gesendet:`);\nconsole.log(`   Dokument ID: ${item.document_id}`);\nconsole.log(`   Titel: ${item.title}`);\nconsole.log(`   Tags: ${item.tags ? item.tags.join(', ') : 'Keine'}`);\n\nreturn [{\n  json: {\n    success: true,\n    document_id: item.document_id,\n    title: item.title,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Fehlerbehandlung\nconst error = $input.first().json;\n\nconsole.error(`❌ Fehler beim Senden an Apple Shortcuts:`);\nconsole.error(`   Fehler: ${error.message || 'Unbekannter Fehler'}`);\nconsole.error(`   Dokument: ${error.document_id || 'Unbekannt'}`);\n\n// Optional: Sende Fehler-Notification (z.B. an Slack, Discord, etc.)\n// Hier könntest du einen weiteren HTTP Request zu einem Monitoring-System machen\n\nreturn [{\n  json: {\n    error: true,\n    message: error.message || 'Webhook failed',\n    document_id: error.document_id || null,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "handle-error",
      "name": "Handle Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Keine neuen Dokumente gefunden\nconsole.log('ℹ️ Keine neuen Todo-Dokumente gefunden');\n\nreturn [{\n  json: {\n    message: 'No new documents found',\n    timestamp: new Date().toISOString(),\n    total_processed: $workflow.getStaticData('global').processedDocs?.length || 0\n  }\n}];"
      },
      "id": "no-new-docs",
      "name": "No New Documents",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}",
        "responseCode": 200,
        "responseHeaders": {
          "entries": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "responseBody": "={{ {\n  \"status\": \"success\",\n  \"message\": \"Paperless Todo Workflow executed\",\n  \"timestamp\": new Date().toISOString(),\n  \"documents_processed\": $json.length || 0\n} }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "paperless-todo-trigger",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "manual-webhook",
      "name": "Manual Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        180
      ],
      "webhookId": "paperless-todo-manual"
    },
    {
      "parameters": {
        "functionCode": "// Memory Cleanup - Bereinige alte Einträge periodisch\nconst processedDocs = $workflow.getStaticData('global').processedDocs || [];\nconst now = new Date();\nconst oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n// In einer echten Implementierung würdest du hier Timestamps verwenden\n// Für jetzt behalten wir nur die letzten 500 Dokument-IDs\nif (processedDocs.length > 500) {\n  $workflow.getStaticData('global').processedDocs = processedDocs.slice(-500);\n  console.log(`🧹 Memory cleanup: Reduced processed docs from ${processedDocs.length} to 500`);\n}\n\nreturn [{ json: { cleanup: true, timestamp: now.toISOString() } }];"
      },
      "id": "memory-cleanup",
      "name": "Memory Cleanup",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        180
      ]
    }
  ],
  "connections": {
    "Every 5 minutes": {
      "main": [
        [
          {
            "node": "Get Todo Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Todo Documents": {
      "main": [
        [
          {
            "node": "Process Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Documents": {
      "main": [
        [
          {
            "node": "Filter Valid Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Documents": {
      "main": [
        [
          {
            "node": "Send to Apple Shortcuts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No New Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Apple Shortcuts": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No New Documents": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Webhook Trigger": {
      "main": [
        [
          {
            "node": "Memory Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory Cleanup": {
      "main": [
        [
          {
            "node": "Get Todo Documents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "global": {
      "processedDocs": []
    }
  },
  "tags": [
    {
      "id": "paperless",
      "name": "paperless"
    },
    {
      "id": "apple",
      "name": "apple"
    },
    {
      "id": "reminders",
      "name": "reminders"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2025-01-02T12:00:00.000Z",
  "versionId": "1"
}